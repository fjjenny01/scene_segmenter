#include <ros/ros.h>
#include <ros/package.h>
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <boost/shared_ptr.hpp>
#include <pcl_ros/point_cloud.h>


#include "std_msgs/String.h"
#include "sensor_msgs/PointCloud2.h"

#include "cluster_extractor.h"
#include "bci_processing/BCITrialRequest.h"
#include "bci_processing/BCITrialResult.h"

namespace scene_segmenter_node
{
    class SceneSegmenterNode
    {
        private:
            ros::NodeHandle node_handle;

            ros::Subscriber pointCloudSubscriber;
            ros::Subscriber bciTrialSubscriber;
            void pointCloudMessageCallback(const sensor_msgs::PointCloud2::ConstPtr &msg);
            void timerCallback(const ros::TimerEvent&);

            void bciMessageCallback(const bci_processing::BCITrialResult::ConstPtr &msg);

            ros::Publisher segmentedObjectsPublisher;
            ros::Publisher bciTrialPublisher;
            ros::Timer timer;

            bool sending_bci_trials;
            int delay_ticks;
            size_t current_send_index;
            std::string frame_id;

            std::vector<pcl::PointCloud<pcl::PointXYZ>::Ptr> to_send;
 	    std::map<int, int> bci_results;
        public:
            SceneSegmenterNode();
    };


    SceneSegmenterNode::SceneSegmenterNode(): node_handle("")
    {
        pointCloudSubscriber = node_handle.subscribe("/kinect_head/depth/points/", 10, &SceneSegmenterNode::pointCloudMessageCallback, this);
        bciTrialSubscriber =  node_handle.subscribe("/bcitrialresult", 1, &SceneSegmenterNode::bciMessageCallback, this);
        timer = node_handle.createTimer(ros::Duration(0.5), &SceneSegmenterNode::timerCallback, this);
        segmentedObjectsPublisher = node_handle.advertise<sensor_msgs::PointCloud2>("segmented_objects_PointCloud2",10);
        bciTrialPublisher = node_handle.advertise<bci_processing::BCITrialRequest> ("bcitrialrequest", 10);

        sending_bci_trials = false;
        current_send_index = 0;
        delay_ticks = 0;

        ROS_INFO("scene_segmenter_node ready");
    }

    void SceneSegmenterNode::timerCallback(const ros::TimerEvent&)
    {
        if (!sending_bci_trials || !to_send.size()) {
	    sensor_msgs::PointCloud2 pc_msg;
            pcl::PointCloud<pcl::PointXYZI> cloud;
            cloud.width = 1;
            cloud.height = 1;
            cloud.is_dense = false;
            cloud.points.resize(1);
            cloud.points[0].x = 0;
            cloud.points[0].y = 0;
            cloud.points[0].z = 0;
            cloud.points[0].intensity = 0;

	        pcl::toROSMsg(cloud, pc_msg);
            pc_msg.header.frame_id = frame_id;

    	    segmentedObjectsPublisher.publish(pc_msg);

            return;
        }

        if (current_send_index < to_send.size()) {
            sensor_msgs::PointCloud2 pc_msg;
            pcl::toROSMsg(*to_send.at(current_send_index), pc_msg);

            pc_msg.header.frame_id = frame_id;

            segmentedObjectsPublisher.publish(pc_msg);

            bci_processing::BCITrialRequest request;
            request.stamp =  ros::Time::now();
            request.trial_id = static_cast<uint64_t>((rand() * 1.0 / RAND_MAX) * 1.0e19);
            request.label = 0;
            bciTrialPublisher.publish(request);

            ROS_INFO("BCI message sent: %lu of %lu", current_send_index + 1, to_send.size());
            ++current_send_index;
        } else {
	    sensor_msgs::PointCloud2 pc_msg;
            pcl::PointCloud<pcl::PointXYZI> cloud;
            cloud.width = 1;
            cloud.height = 1;
            cloud.is_dense = false;
            cloud.points.resize(1);
            cloud.points[0].x = 0;
            cloud.points[0].y = 0;
            cloud.points[0].z = 0;
            cloud.points[0].intensity = 0;

	    pcl::toROSMsg(cloud, pc_msg);
            pc_msg.header.frame_id = frame_id;

    	    segmentedObjectsPublisher.publish(pc_msg);


            if (delay_ticks < 0) {
                sending_bci_trials = false;
                current_send_index = 0;
                to_send.clear();
                ROS_INFO("DELAY COMPLETE");
            }
            --delay_ticks;
        }
    }


    void SceneSegmenterNode::pointCloudMessageCallback(const sensor_msgs::PointCloud2::ConstPtr &msg)
    {
        ROS_INFO("Received PCL message");
        if (sending_bci_trials) {
            return;
        }

        current_send_index = 0;
        to_send.clear();

        frame_id = msg.get()->header.frame_id;

        pcl::PointCloud<pcl::PointXYZ>::Ptr sceneCloud (new pcl::PointCloud<pcl::PointXYZ>());
        pcl::fromROSMsg(*msg, *sceneCloud);

        //extract clusters
        ClusterExtractor *clusterExtractor = new ClusterExtractor();
        clusterExtractor->setCloud(sceneCloud);
        clusterExtractor->computeClusters();
        std::vector<pcl::PointCloud<pcl::PointXYZ>::Ptr> cloudClusters = clusterExtractor->getCloudClusters();
        delete clusterExtractor;

        int most_points = -1;
        int best = 0;

        for (int cnt = 0; cnt < 5; cnt++)
        {
            most_points = -1;
            best = 0;
            for (int i = 0; i < cloudClusters.size(); ++i) {
                pcl::PointCloud<pcl::PointXYZ>::Ptr ptr = cloudClusters.at(i);
                if (ptr->points.size() > most_points) {
                    best = i;
                    most_points = ptr->points.size();
                }
            }

            to_send.push_back(cloudClusters.at(best));
            cloudClusters.erase(cloudClusters.begin()+best);
        }

        sending_bci_trials = true;
        delay_ticks = 4;
    }

    void SceneSegmenterNode::bciMessageCallback(const bci_processing::BCITrialResult::ConstPtr &msg)
    {

	bci_results[msg.get()->trial_id] = msg.get()->probability;
        ROS_INFO("Received bci message trial id: %lu probability: %.02f", msg.get()->trial_id, msg.get()->probability);
    }


}

int main(int argc, char **argv)
{

    ros::init(argc, argv, "scene_segmenter_node");
    scene_segmenter_node::SceneSegmenterNode node;

    ros::spin();
    return 0;
}
